- hunt show page:
1. add date and location and meeting place
2. add link to add item

not getting error class on location or items nested form!

4. controllers
    - requires nested resources w/ restful urls
        - nested resource must provide a form that relates to parent resource
5. views
    - authentication: standard login and outside service (fb)
        - authentication (use oauth for FB)
    - forms should display validation errors enclosed in class="fields_with_errors" with error messages present in views   --- put devise errors in layouts/application for now!
    - dropdown menu w/ all us states
    - add username field to login/signup pages
5.5 features
    - when hunt is active there is a leaderboard on the hunt view page
    - can only join pending hunts
    - when hunt becomes active the current_team of all team participants becomes the team's id
    - status of hunt automatically turns to active at start time and completed at end time
5.6 integrate use of slugs instead of ids in the urls
5.7 add descriptions to hunts???? see what the show page looks like once some styling is added.
5.9 REFACTOR!!!
5.9.1  go back and delete unused methods!
6. check off requirements in spec file
7. write README.md
    - requires one AR scope level method (see the boat lab - https://github.com/lpassamano/model-class-methods-lab-v-000) --- I think this is done, but will need to check!

General notes:
-keep it dry
-separation of concerns (mvc and btwn models)
-use helper methods in views and partials
-record coding session

GEMS to research
-factory_bot #creates seed data
    http://www.rubydoc.info/gems/factory_bot/file/GETTING_STARTED.md
-database_cleaner #look up how ot use this again
-faker #generates fake data
-friendly_id #slugging and permalink gem


Ideas for future development:
- JQUERY PROJECT - for filter by location in Hunts index view make the city list update once you select the state
- make items for hunt appear in order (ie the next one shows only after you find the first one)
