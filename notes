- hunt show page:
1. add date and location and meeting place
2. add link to add item
3. remove edit/delete item links from hunt show page
4. if there are no remaining team members, the team is destroyed!

- home page:
1. if you have active hunt - link to it from home page

- css style
1. found items -- .found_items
2. upcoming hunts -- .upcoming_hunt

-messages --
go through spec comments re: error messages
add error and success messages for better UX



5.6 integrate use of slugs instead of ids in the urls
5.7 add descriptions to hunts???? see what the show page looks like once some styling is added.
5.9 REFACTOR!!!  -- modules for methods that are the same?
5.9.1  go back and delete unused methods!
6. check off requirements in spec file
7. write README.md
    - requires one AR scope level method (see the boat lab - https://github.com/lpassamano/model-class-methods-lab-v-000) --- I think this is done, but will need to check!

General notes:
-keep it dry
-separation of concerns (mvc and btwn models)
-use helper methods in views and partials
-record coding session

GEMS to research
-factory_bot #creates seed data
    http://www.rubydoc.info/gems/factory_bot/file/GETTING_STARTED.md
-database_cleaner #look up how ot use this again
-faker #generates fake data
-friendly_id #slugging and permalink gem


Ideas for future development:
- JQUERY PROJECT - for filter by location in Hunts index view make the city list update once you select the state
- make items for hunt appear in order (ie the next one shows only after you find the first one)
